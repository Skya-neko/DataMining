# -*- coding: utf-8 -*-
"""ch4_class-1-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EYE0Z7jnUGRSvwrfSduLssv68GrLhi_a
"""

import pandas as pd 
import numpy as np  
import matplotlib.pyplot as plt  
pima_df = pd.read_csv('pima.csv')

for i in ['serum_insulin', 'bmi', 'plasma_glucose_concentration', 'diastolic_blood_pressure', 'triceps_thickness']:
  pima_df[i] = pima_df[i].replace([0],[None])

pima_df.isnull().sum()

null = pima_df['plasma_glucose_concentration'].isnull()
null_ind = pima_df[null].index ##查出plasma_glucose_concentration有缺失的資料
null_ind

pima_df['plasma_glucose_concentration'] = pima_df['plasma_glucose_concentration'].fillna(pima_df['plasma_glucose_concentration'].mean())

pima_df.isnull().sum()

pima_df.loc[null_ind]

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values=np.nan,strategy='mean')
pima_imputed = imputer.fit_transform(pima_df)

type(pima_imputed)

pima_column_names = ['times_pregnant', 'plasma_glucose_concentration', 'diastolic_blood_pressure', 'triceps_thickness', 'serum_insulin', 'bmi', 'pedigree_function', 'age', 'onset_diabetes']
pima_imputed = pd.DataFrame(pima_imputed, columns=pima_column_names)

pima_imputed

pima_df

#MinMaxScaling
from sklearn.preprocessing import MinMaxScaler

glucose_min_max_standardized = MinMaxScaler().fit_transform(pima_imputed[['plasma_glucose_concentration']])
glucose_min_max_standardized

ax = pd.Series(glucose_min_max_standardized.reshape(-1,)).hist()
ax.set_title('Distribution of plasma_glucose_concentration after Min Max Scaling')

pima_standardized = MinMaxScaler().fit_transform(pima_imputed)
pima_standardized

pima_column_names = ['times_pregnant', 'plasma_glucose_concentration', 'diastolic_blood_pressure', 'triceps_thickness', 'serum_insulin', 'bmi', 'pedigree_function', 'age', 'onset_diabetes']
pima_standardized = pd.DataFrame(pima_standardized, columns=pima_column_names)

pima_standardized

pima_standardized.hist(figsize=(15, 15), sharex=True)

#z分數標準化
print(pima_imputed['plasma_glucose_concentration'].head())

mu = pima_imputed['plasma_glucose_concentration'].mean()
sigma = pima_imputed['plasma_glucose_concentration'].std()
z = (pima_imputed['plasma_glucose_concentration'] - mu ) / sigma

print(z.head())

from sklearn.preprocessing import StandardScaler

#z分數標準化前的平均數、標準差
pima_imputed['plasma_glucose_concentration'].mean() , pima_imputed['plasma_glucose_concentration'].std()

ax = pima_imputed['plasma_glucose_concentration'].hist()
ax.set_title('Distrubution of plasma_glucose_concentration')

#z分數標準化後的平均數、標準差
scaler = StandardScaler()
glucose_z_score = scaler.fit_transform(pima_imputed[['plasma_glucose_concentration']])
glucose_z_score.mean(), glucose_z_score.std()

ax = pd.Series(glucose_z_score.reshape(-1,)).hist()
ax.set_title('Distrubution of plasma_glucose_concentration after Z Score Scaling')

pima_z_score = StandardScaler().fit_transform(pima_imputed)
pima_column_names = ['times_pregnant', 'plasma_glucose_concentration', 'diastolic_blood_pressure', 'triceps_thickness', 'serum_insulin', 'bmi', 'pedigree_function', 'age', 'onset_diabetes']
pima_z_score = pd.DataFrame(pima_z_score, columns=pima_column_names)
pima_z_score.hist(figsize=(15, 15), sharex=True)