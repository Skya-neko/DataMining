# -*- coding: utf-8 -*-
"""ch4_class-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16FjyhR_pN6k-xHA6OIOyHFCPa5p2xZNC
"""

import pandas as pd
import numpy as np

np.random.seed(123)

# https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients
credit_card_default = pd.read_csv('credit_card_default.csv')

credit_card_default.shape  # 30,000 rows and 24 columns

#由於欄位較多，故我們將資料使用敘述性統計並轉置以便更好的觀察資料
credit_card_default.describe().T

credit_card_default.isnull().sum()

feature_df = credit_card_default.drop('default payment next month', axis = 1) #特徵矩陣
result = credit_card_default['default payment next month'] #反應出是否為0不會遲繳、1會遲繳的客戶

from sklearn.model_selection import GridSearchCV  #匯入網格搜尋模組

def get_best_model_and_accuracy(model, params, X, y):
    grid = GridSearchCV(model,       #要搜尋的模型，指定模型後GridSearchCV就會自動去蒐集想要從該模型中取得的資料
                params,      #要嘗試的參數
                error_score=0.)  #如果報錯，結果是0

    grid.fit(X, y)           # 擬合模型和參數

    
    print ("Best Accuracy: {}".format(grid.best_score_))   #效能指標：準確率
    print ("Best Parameters: {}".format(grid.best_params_)) #最佳準確率的最佳參數
    print ("Average Time to Fit (s): {}".format(round(grid.cv_results_['mean_fit_time'].mean(), 3)))  #效能元指標：擬合的平均時間
    print ("Average Time to Score (s): {}".format(round(grid.cv_results_['mean_score_time'].mean(), 3))) #效能元指標：預測的平均時間

# 引入四種機器學習模型
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier


# 為我們的grid search 設定參數
knn_params = {'n_neighbors': [1, 3, 5, 7]}
tree_params = {'max_depth': [None, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]}
forest_params = {'n_estimators': [10, 50, 100], 'max_depth': [None, 1, 3, 5, 7]}


knn = KNeighborsClassifier()    #KNN機器學習模型
d_tree = DecisionTreeClassifier()  #二元決策數機器學習模型
forest = RandomForestClassifier()  #隨機森林機器學習模型

get_best_model_and_accuracy(knn, knn_params, feature_df, result)

get_best_model_and_accuracy(d_tree, tree_params, feature_df, result)

get_best_model_and_accuracy(forest, forest_params, feature_df, result)

credit_card_default.corr()

# 使用 seaborn 產生熱區圖heatmaps
import seaborn as sns
import matplotlib.style as style
# 指定繪圖風格
style.use('fivethirtyeight')


sns.heatmap(credit_card_default.corr())

# 篩選出只有特徵和結果的相關性
credit_card_default.corr()['default payment next month']

credit_card_default.corr()['default payment next month'].abs() > .2

highly_correlated_features = credit_card_default.columns[credit_card_default.corr()['default payment next month'].abs() > .2]

highly_correlated_features

highly_correlated_features = highly_correlated_features.drop('default payment next month')

highly_correlated_features

feature_df_subsetted = feature_df[highly_correlated_features]

get_best_model_and_accuracy(d_tree, tree_params, feature_df_subsetted, result)